{"version":3,"sources":["webpack:///./src/components/bg.js","webpack:///./src/components/seo.js","webpack:///./src/pages/404.js"],"names":["StyledBG","styled","div","theme","backgroundColor","colors","link","BG","SEO","description","lang","title","path","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","charSet","name","content","property","siteUrl","rel","type","href","defaultProps","meta","NotFoundPage","props","location","pathname","style","maxWidth","padding","margin"],"mappings":"2FAAA,yBAGMA,EAHN,UAGiBC,QAAOC,IAAV,mEAAGD,CAAH,2OAOQ,qBAAGE,MAAkBC,mBAI3B,gBAAGD,EAAH,EAAGA,MAAH,6CAC2BA,EAAME,OAAOC,KADxC,QACoDH,EAAMC,gBAD1D,YAWDG,IAHJ,WACT,OAAO,kBAACP,EAAD,Q,kCCvBT,iDAYA,SAASQ,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAC/BC,EAASC,yBAAe,cAAxBD,KAeFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAGzD,OACE,kBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFC,MAAOA,EACPO,cAAkBL,EAAKG,aAAaL,MAAvB,SAEb,0BAAMQ,QAAQ,UACd,0BAAMT,KAAK,OACX,0BAAMU,KAAK,QAAQC,QAASV,IAC5B,0BAAMS,KAAK,cAAcC,QAASN,IAClC,0BAAMK,KAAK,WAAWC,QAASV,IAE/B,0BAAMW,SAAS,WAAWD,QAhBb,kBAiBb,0BAAMC,SAAS,iBAAiBD,QAASN,IACzC,0BAAMO,SAAS,UAAUD,QAAS,YAClC,0BAAMC,SAAS,SAASD,QAASR,EAAKG,aAAaO,QAAUX,IAC7D,0BAAMU,SAAS,WAAWD,QAAO,GAAKR,EAAKG,aAAaO,SAAUX,GAAc,YAA/C,qBAEjC,0BAAMQ,KAAK,eAAeC,QAAQ,wBAClC,0BAAMD,KAAK,kBAAkBC,QAAQ,aACrC,0BAAMD,KAAK,eAAeC,QAAQ,aAClC,0BAAMC,SAAS,WAAWD,QAAO,GAAKR,EAAKG,aAAaO,SAAUX,GAAc,YAA/C,qBAEjC,0BAAMY,IAAI,YAAYC,KAAK,sBAAsBC,KAAK,cAK5DlB,EAAImB,aAAe,CACjBjB,KAAK,KACLkB,KAAM,GACNnB,YAAY,IAUCD,O,kCC1Ef,oEAiBeqB,UAXM,SAAAC,GAAK,OACxB,kBAAC,IAAD,CAAQlB,KAAMkB,EAAMC,SAASC,UAC3B,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKrB,MAAM,iBAAiBC,KAAMkB,EAAMC,SAASC,WACjD,yBAAKC,MAAO,CAACC,SAAU,KAAMC,QAAS,GAAGC,OAAQ,SAC/C,kDACA","file":"component---src-pages-404-js-5c6a00f7a3b8431d5dbf.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledBG = styled.div`\r\n  position: fixed;\r\n  z-index: -1;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  background-color: ${({ theme }) => theme.backgroundColor};\r\n  -webkit-transform: translate3d(0, 0, 0);\r\n  height: -webkit-fill-available;\r\n  opacity: 1;\r\n  background: ${({ theme }) =>\r\n    `radial-gradient(50% 50% at 50% 50%, ${theme.colors.link} 0%, ${theme.backgroundColor} 100%)`};\r\n  opacity: 0.15;\r\n  /* z-index: 9999; */\r\n  user-select: none;\r\n  pointer-events: none;\r\n`\r\n\r\nconst BG = () => {\r\n  return <StyledBG />\r\n}\r\nexport default BG\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, title, path }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            siteUrl\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const uniTitle = 'LEAD Protocol'\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang\r\n      }}\r\n      title={title}\r\n      titleTemplate={`${site.siteMetadata.title} | %s`}\r\n    >\r\n      <meta charSet=\"utf-8\" />\r\n      <html lang=\"en\" />\r\n      <meta name=\"title\" content={title} />\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta name=\"keywords\" content={title}></meta>\r\n\r\n      <meta property=\"og:title\" content={uniTitle} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content={'website'} />\r\n      <meta property=\"og:url\" content={site.siteMetadata.siteUrl + path} />\r\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}${path ? path : '/images/'}twitter-card.jpg`} />\r\n\r\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n      <meta name=\"twitter:creator\" content=\"@Uniswap\"></meta>\r\n      <meta name=\"twitter:site\" content=\"@Uniswap\" />\r\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}${path ? path : '/images/'}twitter-card.jpg`} />\r\n\r\n      <link rel=\"alternate\" type=\"application/rss+xml\" href=\"/rss.xml\" />\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default SEO\r\n","import React from 'react'\r\n\r\nimport Layout from '../layouts'\r\nimport SEO from '../components/seo'\r\nimport BG from '../components/bg'\r\n\r\nconst NotFoundPage = props => (\r\n  <Layout path={props.location.pathname}>\r\n    <BG />\r\n    <SEO title=\"404: Not found\" path={props.location.pathname} />\r\n    <div style={{maxWidth: 1440, padding: 32,margin: 'auto'}}>\r\n      <h1>Missing Unicorn ðŸ¦„</h1>\r\n      <p>You just found a page that doesn&#39;t exist.</p>\r\n    </div>\r\n  </Layout>\r\n)\r\n\r\nexport default NotFoundPage\r\n"],"sourceRoot":""}